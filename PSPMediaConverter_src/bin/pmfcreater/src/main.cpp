#include <windows.h>
#include <stdlib.h>
#include <stdio.h>
#include <Mmsystem.h>
#pragma comment(lib,"winmm.lib")
#include <commctrl.h>
#pragma comment(lib,"comctl32.lib")

/*  Declare Windows procedure  */
LRESULT CALLBACK WindowProcedure (HWND, UINT, WPARAM, LPARAM);

/*  Make the class name into a global variable  */
char szClassName[ ] = "WindowsApp";
char titlename[] = "PMF Creater 0.2 by piccahoe"; 
HWND label1;
HWND label2;
HWND label3;
HWND label4;
HWND label5;
HWND label6;
HWND label7;
HWND edit1;
HWND edit2;
HWND edit3;
HWND edit4;
HWND edit5;
HWND button1;
HWND button2;
HWND button3;
HWND chkbx1;

OPENFILENAME ofn;
char szFileName[MAX_PATH];
char savezFileName[MAX_PATH];
char text[255];
int mask4 = 255;
int r1=0;
int xero=0;
int fsize;
int frmfile;
int isend=0;
int counter=0;
int counter2=0;
int hour=0;
int mins=0;
int secs=0;
long totaltime;
int timeshifted=24;
int timecount=0;
int results=0;

char outfile[255];
char newinfile[255];
char infile[255];
char newpath[255];
FILE* gameboot;
FILE* mpsfile;

int HeaderFile[] = { 
0x50,0x53,0x4D,0x46,0x30,0x30,0x31,0x32,0x00,0x00,0x08,0x00,0x00,0x5A,0x88,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x4E,0x00,0x00,0x00,0x01,0x5F,0x90,0x00,0x00,0x00,0x69,0x6F,0x75,
0x00,0x00,0x61,0xA8,0x00,0x01,0x5F,0x90,0x02,0x01,0x00,0x00,0x00,0x34,0x00,0x00,
0x00,0x01,0x5F,0x90,0x00,0x00,0x00,0x69,0x6F,0x75,0x00,0x01,0x00,0x00,0x00,0x22,
0x00,0x02,0xE0,0x00,0x21,0xEF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x11,
0x00,0x00,0xBD,0x00,0x20,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};

HWND crteedtbox(HWND hwnd,int ID);
HWND lbel(HWND hwnd,int ID,char* caption);
HWND bttn(HWND hwnd,int ID, char* caption);
HWND chkbox(HWND hwnd,int ID, char* caption);

void setwdthhgt(int x, int y,HWND hwnd);
void setpos(int x,int y,HWND hwnd);
int CheckMPS(char* filename);
long GetFileSize(char* tfile);
int  editheader(char* filename);
int FileCombine(char* mpsfile,char* newfile);
int insertheader(char* filename);
int insertmps(char* filename);
int flenmefx(char* infile);
int gtandmkpth(); //get and make the path of the new gameboot


int WINAPI WinMain (HINSTANCE hThisInstance,
                    HINSTANCE hPrevInstance,
                    LPSTR lpszArgument,
                    int nFunsterStil)

{
    HWND hwnd;               /* This is the handle for our window */
    MSG messages;            /* Here messages to the application are saved */
    WNDCLASSEX wincl;        /* Data structure for the windowclass */

    /* The Window structure */
    wincl.hInstance = hThisInstance;
    wincl.lpszClassName = szClassName;
    wincl.lpfnWndProc = WindowProcedure;      /* This function is called by windows */
    wincl.style = CS_DBLCLKS;                 /* Catch double-clicks */
    wincl.cbSize = sizeof (WNDCLASSEX);

    /* Use default icon and mouse-pointer */
    wincl.hIcon = LoadIcon (NULL, IDI_APPLICATION);
    wincl.hIconSm = LoadIcon (NULL, IDI_APPLICATION);
    wincl.hCursor = LoadCursor (NULL, IDC_ARROW);
    wincl.lpszMenuName = NULL;                 /* No menu */
    wincl.cbClsExtra = 0;                      /* No extra bytes after the window class */
    wincl.cbWndExtra = 0;                      /* structure or the window instance */
    /* Use Windows's default color as the background of the window */
    wincl.hbrBackground =  (HBRUSH) COLOR_BACKGROUND;

    /* Register the window class, and if it fails quit the program */
    if (!RegisterClassEx (&wincl))
        return 0;

    /* The class is registered, let's create the program*/
    hwnd = CreateWindowEx (
           0,                   /* Extended possibilites for variation */
           szClassName,         /* Classname */
           titlename,       /* Title Text */
           DS_MODALFRAME+WS_POPUP+WS_SYSMENU+WS_CAPTION+WS_MINIMIZEBOX, /* default window */
           CW_USEDEFAULT,       /* Windows decides the position */
           CW_USEDEFAULT,       /* where the window ends up on the screen */
           504,                 /* The programs width */
           180,                 /* and height in pixels */
           HWND_DESKTOP,        /* The window is a child-window to desktop */
           NULL,                /* No menu */
           hThisInstance,       /* Program Instance handler */
           NULL                 /* No Window Creation data */
           );

    /* Make the window visible on the screen */
    ShowWindow (hwnd, nFunsterStil);

    /* Run the message loop. It will run until GetMessage() returns 0 */
    while (GetMessage (&messages, NULL, 0, 0))
    {
        /* Translate virtual-key messages into character messages */
        TranslateMessage(&messages);
        /* Send message to WindowProcedure */
        DispatchMessage(&messages);
    }

    /* The program return-value is 0 - The value that PostQuitMessage() gave */
    return messages.wParam;
}


/*  This function is called by the Windows function DispatchMessage()  */

LRESULT CALLBACK WindowProcedure (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)                  /* handle the messages */
    {
	    case WM_COMMAND:
        {
				if (LOWORD(wParam)==0) {

				} else {
					if (LOWORD(wParam) == 3) 
                     {
					    
						ZeroMemory(&ofn, sizeof(ofn));
						ofn.lStructSize = sizeof(ofn); 
						ofn.hwndOwner = hwnd;
						ofn.lpstrFilter = "MPS File (*.mps)\0*.mps\0";
						ofn.lpstrFile = szFileName;
						ofn.nMaxFile = MAX_PATH;
						ofn.Flags = OFN_EXPLORER | OFN_FILEMUSTEXIST | OFN_HIDEREADONLY;
						ofn.lpstrDefExt = "txt";
						if(GetOpenFileName(&ofn))
						{
                           if (CheckMPS(szFileName)   == 1)
                           {
						       SetDlgItemText(hwnd,2,szFileName);  	
						       wsprintf(text,"File Size: %i kb" ,GetFileSize(szFileName));
						       SetDlgItemText(hwnd,4,text); 
                           } else {
                                  
                                  MessageBox(hwnd,"Either this file doesn't exist or this file isn't a mps file","error",MB_OK);
                           }
						}
						
                     }
                    if (LOWORD(wParam) == 7)
                    {
                        
						ZeroMemory(&ofn, sizeof(ofn));
						ofn.lStructSize = sizeof(ofn); 
						ofn.hwndOwner = hwnd;
						ofn.lpstrFilter = "pmf File (*.pmf)\0*.pmf \0";
						ofn.lpstrFile = savezFileName;
						ofn.nMaxFile = MAX_PATH;
						ofn.Flags = OFN_EXPLORER | OFN_FILEMUSTEXIST | OFN_HIDEREADONLY;
						ofn.lpstrDefExt = "txt";
						if(GetSaveFileName(&ofn))
						{
                            
						   SetDlgItemText(hwnd,6,savezFileName);  	

						} 
                    }
                    
                    if (LOWORD(wParam) == 8)
                    {
                          LRESULT checkState; 
                          char temp[255];
                          checkState = SendDlgItemMessage(hwnd,16,BM_GETCHECK, 0, 0);
                            
                           if (GetDlgItemText(hwnd,2, temp, 255) == NULL) 
                           {
                               MessageBox(hwnd,"please enter the path to your mps!","Error",MB_OK);
                               return -1;
                           }
                            if (GetDlgItemText(hwnd,6, temp, 255) == NULL) 
                           {
                               MessageBox(hwnd,"please enter the save path to your pmf file!","Error",MB_OK);
                               return -1;
                           }
                           

                         
                          GetDlgItemText(hwnd, 13, temp, 255); 
                          mins = atoi(temp);                          
                          
                          GetDlgItemText(hwnd,15, temp, 255); 
                          secs = atoi(temp);                                                      
                            
                          if (mins == 0 && secs==0)
                          {
                            MessageBox(hwnd,"you want to play your pmf file for 0 mins and 0 secs?","Error",MB_OK);       
                            return -1;
                          }
                          
                          if (checkState == BST_CHECKED)
                          {
                              HeaderFile[7] = 0x34;
                              HeaderFile[83] = 0x3E;
                              HeaderFile[104] = 0x01;
                              HeaderFile[109] = 0x24;
                              HeaderFile[127] = 0x12; 
                              HeaderFile[129] = 0x01;
                              HeaderFile[132] = 0x20;
                              HeaderFile[133] = 0x14;
                              HeaderFile[142] = 0x09;
                              HeaderFile[143] = 0x05;
                              HeaderFile[146] = 0x00;
                              HeaderFile[148] = 0x00;
                              HeaderFile[149] = 0x00;
                              HeaderFile[150] = 0x00;
                              HeaderFile[151] = 0x00;  
                              HeaderFile[160] = 0x00; 
                              HeaderFile[161] = 0x00;                                                          
                          }

                          


                          totaltime = (mins*60) +secs;
                          
                          
                          totaltime *= 60;
                          totaltime *= 30;
                          totaltime *=60;
                          

                          timeshifted=3;
                          __asm("mov _totaltime,%eax");
                          __asm("mov _timecount,%ecx");
                          __asm("tohere: inc %ecx");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("cmp %ecx,_timeshifted");   
                          __asm("jne tohere");
                          __asm("mov %eax,_results");      
                          HeaderFile[92] = results;
                          HeaderFile[118] = results;
                          
                          timeshifted=2;
                          __asm("mov _totaltime,%eax");
                          __asm("mov _timecount,%ecx");
                          __asm("tohere2: inc %ecx");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("cmp %ecx,_timeshifted");   
                          __asm("jne tohere2");
                          __asm("and _mask4,%eax");
                          __asm("mov %eax,_results");  
                          HeaderFile[93] = results;
                          HeaderFile[119] = results;
                          timeshifted=1;
                          __asm("mov _totaltime,%eax");
                          __asm("mov _timecount,%ecx");
                          __asm("tohere3: inc %ecx");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("shr %eax");
                          __asm("cmp %ecx,_timeshifted");   
                          __asm("jne tohere3");
                          __asm("and _mask4,%eax");
                          __asm("mov %eax,_results"); 
                          HeaderFile[94] = results;
                          HeaderFile[120] = results;
                          
                          __asm("mov _totaltime,%eax");
                          __asm("and _mask4,%eax");
                          __asm("mov %eax,_results"); 
                          HeaderFile[95] = results;
                          HeaderFile[121] = results;
                                                                                                                                                                                  
                     
                          
                          if (savezFileName == NULL)
                          {
                              MessageBox(hwnd,"What do you want to save the file as??","error",MB_OK);
                              return -1;
                          }
                          if (editheader(szFileName) == -1)
                          {
                              MessageBox(hwnd,"cannot read file size!","error",MB_OK);
                              return -1;
                           }
                           if (FileCombine(szFileName,savezFileName) == -1)
                           {
                               MessageBox(hwnd,"Can't Combine File!","error",MB_OK);
                               return -1;
                           }

                           fclose(mpsfile);
                           fclose(gameboot);
                           MessageBox(hwnd,"Done! Enjoy =c]",titlename,MB_OK);
                    }                    
                }
                break;
         }
        case WM_CREATE:
            label1 = lbel(hwnd,1,"Path of your MPS File:");
            setwdthhgt(100, 15,label1);
            setpos(10,10,label1);
            
            edit1 = crteedtbox(hwnd,2);
            setwdthhgt(150, 20,edit1);
            setpos(10,30,edit1);            
            
            button1 =bttn(hwnd,3, "browse");
            setwdthhgt(50, 20,button1);
            setpos(170,30,button1); 
            
            
            label2 = lbel(hwnd,4,"File Size: 0 kb");
            setwdthhgt(100, 15,label2);
            setpos(10,60,label2);
            
            label3 = lbel(hwnd,5,"Save As:");
            setwdthhgt(100, 15,label3);
            setpos(250,10,label3);
            
            edit2 = crteedtbox(hwnd,6);
            setwdthhgt(150, 20,edit2);
            setpos(250,30,edit2);   
 
            button2 =bttn(hwnd,7, "browse");
            setwdthhgt(50, 20,button2);
            setpos(420,30,button2); 

            button3 =bttn(hwnd,8, "Convert");
            setwdthhgt(55, 20,button3);
            setpos(420,115,button3);
            
            label4 = lbel(hwnd,9,"Total Time:");
            setwdthhgt(60, 15,label4);
            setpos(10,90,label4); 
             /*
            label5 = lbel(hwnd,10,"H:");
            setwdthhgt(10, 15,label5);
            setpos(10,120,label5); 
            
            edit3 = crteedtbox(hwnd,11);
            setwdthhgt(20, 20,edit3);
            setpos(25,115,edit3);  
            */
            label6 = lbel(hwnd,12,"M:");
            setwdthhgt(15, 15,label6);
            setpos(10,120,label6); //50
            
            edit4 = crteedtbox(hwnd,13);
            setwdthhgt(20, 20,edit4); //120
            setpos(25,115,edit4);  
            
            label7 = lbel(hwnd,14,"S:");
            setwdthhgt(15, 15,label7);
            setpos(50,120,label7); //95,120
            
            edit5 = crteedtbox(hwnd,15);
            setwdthhgt(20, 20,edit5);
            setpos(65,115,edit5);    //110,115
            
            chkbx1 = chkbox(hwnd,16, "Make Icon");
            setwdthhgt(80, 20,chkbx1);
            setpos(95,115,chkbx1);    //110,115
                       
            //SetDlgItemText(hwnd,11,"0");  	
            SetDlgItemText(hwnd,13,"0");  	
            SetDlgItemText(hwnd,15,"0");
              	
            SetDlgItemText(hwnd,2,NULL);
            SetDlgItemText(hwnd,6,NULL);               
            break;
        case WM_DESTROY:
            PostQuitMessage (0);       /* send a WM_QUIT to the message queue */
            break;
        default:                      /* for messages that we don't deal with */
            return DefWindowProc (hwnd, message, wParam, lParam);
    }

    return 0;
}

HWND crteedtbox(HWND hwnd,int ID)
{
	HWND hedit;
	HFONT hf;
	
	hedit = CreateWindowEx(WS_EX_TRANSPARENT , "EDIT", NULL,SS_NOTIFY|WS_CHILD | WS_VISIBLE | WS_BORDER | EM_SETWORDBREAKPROC,10, 30, 50, 17, hwnd, (HMENU)ID, GetModuleHandle(NULL), NULL);
	hf = CreateFont(15, 0, 0, 0, 0, FALSE, 0, 0, 0, 0, 0, 0, 0,"MS Sans Serif");
	SendDlgItemMessage(hwnd, ID, WM_SETFONT, (WPARAM)hf, TRUE);
	return hedit;
}

HWND lbel(HWND hwnd,int ID,char* caption)
{
    HWND hedit;
	HFONT hf;
	
    hedit = CreateWindowEx(WS_EX_TRANSPARENT, "STATIC", caption, 
		SS_NOTIFY|WS_CHILD | WS_VISIBLE | WS_EX_TRANSPARENT, 
		10, 30, 50, 17, hwnd, (HMENU)ID, GetModuleHandle(NULL), NULL);
	
	hf = CreateFont(15, 0, 0, 0, 0, FALSE, 0, 0, 0, 0, 0, 0, 0,"MS Sans Serif");
	SendDlgItemMessage(hwnd, ID, WM_SETFONT, (WPARAM)hf, TRUE);	
    return hedit;	
}

HWND bttn(HWND hwnd,int ID, char* caption)
{
	HWND hEdit;
	HFONT hf;
	hf = CreateFont(15, 0, 0, 0, 0, FALSE, 0, 0, 0, 0, 0, 0, 0, "MS Sans Serif");
	hEdit = CreateWindowEx(NULL, "BUTTON", caption, 
		WS_CHILD | WS_VISIBLE | BS_DEFPUSHBUTTON, 
		10, 10, 25, 17, hwnd, (HMENU)ID, GetModuleHandle(NULL), NULL);
	SendDlgItemMessage(hwnd, ID, WM_SETFONT, (WPARAM)hf, TRUE);
	return hEdit;
}

HWND chkbox(HWND hwnd,int ID, char* caption)
{
	HWND hEdit;
	HFONT hf;
	hf = CreateFont(15, 0, 0, 0, 0, FALSE, 0, 0, 0, 0, 0, 0, 0, "MS Sans Serif");
	hEdit = CreateWindowEx(NULL, "BUTTON", caption, 
		WS_CHILD | WS_VISIBLE | BS_AUTOCHECKBOX, 
		10, 10, 25, 17, hwnd, (HMENU)ID, GetModuleHandle(NULL), NULL);
	SendDlgItemMessage(hwnd, ID, WM_SETFONT, (WPARAM)hf, TRUE);
	return hEdit;
}

void setwdthhgt(int x, int y,HWND hwnd)
{
	RECT rcClient;
	GetClientRect(hwnd, &rcClient);
	SetWindowPos(hwnd, NULL, rcClient.left,rcClient.top , x, y, SWP_NOZORDER);
}

void setpos(int x,int y,HWND hwnd) {
	RECT rcClient;
	GetClientRect(hwnd, &rcClient);
	SetWindowPos(hwnd, NULL, x,y , rcClient.right, rcClient.bottom, NULL);
    

}

long GetFileSize(char* tfile) 
{
  long flesize=0;
  FILE* a;
  
  a=fopen(tfile,"rb");
  if (a == NULL)
  {
        return -1;
  }
  while(!feof(a))
  {
     fgetc(a);
     flesize++;           
  }
  flesize--;
  fclose(a);
  return flesize;
}

int FileCombine(char* mpsfile,char* newfile)
{
   printf("Inserting Header File...\n");
   if (insertheader(newfile) == -1) return -1;
   printf("Combining both Header and the MPS into one file (%s).\n",newpath);
   if (insertmps(mpsfile) == -1) return -1;
   return 1;
}

int  editheader(char* filename)
{
 
  fsize = GetFileSize(filename);//00001.MPS"); 
  if (fsize == -1) return -1;
  __asm("mov _fsize,%eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");  
  __asm("shr %eax"); 
  __asm("shr %eax"); 
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");  
  __asm("shr %eax"); 
  __asm("shr %eax"); 
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");  
  __asm("shr %eax"); 
  __asm("shr %eax");
  __asm("and _mask4,%eax");
  __asm("mov %eax,_r1");
  HeaderFile[12] = r1;  
  
  __asm("mov _fsize,%eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");  
  __asm("shr %eax"); 
  __asm("shr %eax"); 
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");  
  __asm("shr %eax"); 
  __asm("shr %eax"); 
  __asm("and _mask4,%eax");
  __asm("mov %eax,_r1");
  HeaderFile[13] = r1;
  
  __asm("mov _fsize,%eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");
  __asm("shr %eax");  
  __asm("shr %eax"); 
  __asm("shr %eax"); 
  __asm("and _mask4,%eax");
  __asm("mov %eax,_r1");
  HeaderFile[14] = r1;

  __asm("mov _fsize,%eax");
  __asm("and _mask4,%eax");
  __asm("mov %eax,_r1");
  HeaderFile[15] = r1;
  return 1;
}


int insertheader(char* filename)
{
  int i=0;
  gameboot = fopen(filename,"w+b");
  
  if (gameboot == NULL)
  {
      printf("can't write to file! maybe its being used?");
      return -1;
  }
  
  
  for (i=0;i<2048;i++)
  {
      fputc(HeaderFile[i],gameboot);
  }
  return 1;
}

int insertmps(char* filename)
{
  mpsfile =fopen(filename,"rb");
  int i=0;
  int fs=GetFileSize(filename);
  if (fs == -1) return -1;
  for (i=0;i<fs;i++)
  {
      
      fseek(mpsfile,i,SEEK_SET);
      frmfile=fgetc(mpsfile);
      fputc(frmfile,gameboot);

      
  }    
  return 1;
}

int flenmefx(char* infile)
{
  while(isend!=1)
  {
     if (infile[counter2] == '\0')
     {
         isend = 1;
     } 
     if (infile[counter2] == '\\')
     {
         newinfile[counter] = infile[counter2];
         counter++;
         newinfile[counter] = '\\';
     } else {
         newinfile[counter] = infile[counter2];
     }
     counter2++;
     counter++;
  }
}

int gtandmkpth()
{
  int mark=0;
  int cnt=strlen(newinfile);
  int cnt2=0;
  strcpy(newpath,newinfile);
  while(mark!=1)
  {
      if (infile[cnt] == '\\')
      {

          newpath[cnt+2] = '\0';
          mark=1;
      } else {

             
             cnt--;
          
      }
  }
  
  newpath[cnt+2] = 'g';
  newpath[cnt+3] = 'a';
  newpath[cnt+4] = 'm';
  newpath[cnt+5] = 'e';
  newpath[cnt+6] = 'b';
  newpath[cnt+7] = 'o';
  newpath[cnt+8] = 'o';
  newpath[cnt+9] = 't';
  newpath[cnt+10] = '.';
  newpath[cnt+11] = 'p';
  newpath[cnt+12] = 'm';
  newpath[cnt+13] = 'f'; 
  newpath[cnt+14] = '\0'; 
  return 1;
}

int CheckMPS(char* filename)
{
   FILE* a;
   int b1=0,b2=0,b3=0,b4=0,b5=0;
   
   a = fopen(filename,"rb");
   if (a == NULL) return -1;
   fseek(a,0,SEEK_SET);
   
   b1=fgetc(a); 
   b2=fgetc(a);
   b3=fgetc(a);   
   b4=fgetc(a);   
   b5=fgetc(a);   
   fclose(a);
   if (b1 == 0x00 && b2 == 0x00 && b3 == 0x01 && b4 == 0xBA && b5 == 0x44) return 1;
   return 0;
   
}
